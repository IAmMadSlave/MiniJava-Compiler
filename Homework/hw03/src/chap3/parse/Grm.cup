package parse;

parser code {: 
  errormsg.ErrorMsg errorMsg;

  public void syntax_error(java_cup.runtime.Symbol current) {
    report_error("Syntax error (" + current.sym + ")", current);
  }

  public void report_error(String message, java_cup.runtime.Symbol info) {
    errorMsg.error(info.left, message);
  }

  public Grm(java_cup.runtime.Scanner scan, errormsg.ErrorMsg err) {
    this(scan);
    errorMsg = err;
  }
:};

/*terminals */
terminal ID, INTEGER_LITERAL;
terminal CLASS, PUBLIC, STATIC, VOID, MAIN, STRING, RETURN,
	INT, BOOLEAN, IF, ELSE, WHILE, PRINTLN, LENGTH,
	TRUE, FALSE, THIS, NEW,
	LBRACE, RBRACE, LPAREN, RPAREN, LBRACK, RBRACK,
	SEMICOLON, COMMA, ASSIGN, AND, LT, PLUS, MINUS, TIMES,
	DOT, EXCLAMATION;

/*Non terminals */
non terminal Program;
non terminal MainClass;
non terminal ClassDecl;
non terminal VarDecl;
non terminal MethodDecl;
non terminal FormalList;
non terminal FormalRest;
non terminal Type;
non terminal Statement;
non terminal Exp;
non terminal ExpList;
non terminal ExpRest;
non terminal ClassDeclStar;
non terminal VarDeclStar;
non terminal MethodDeclStar;
non terminal StatementStar;
non terminal ExpRestStar;
non terminal FormalRestStar;


/* Precedences */
precedence left AND;
precedence left LT;
precedence left PLUS,MINUS;
precedence left TIMES;
precedence right EXCLAMATION;
precedence right LBRACK, DOT;


start with Program;

// Replace the dummy production below with a grammar for MiniJava.
/* grammer */
Program		   ::= MainClass ClassDeclStar;
MainClass	   ::= CLASS ID LBRACE PUBLIC STATIC VOID MAIN LPAREN STRING LBRACK RBRACK ID RPAREN LBRACE Statement RBRACE RBRACE;
ClassDeclStar  ::= ClassDeclStar ClassDecl
				 | ;
ClassDecl	   ::= CLASS ID LBRACE VarDeclStar MethodDeclStar RBRACE;
VarDeclStar	   ::= VarDeclStar VarDecl
			     | ;
VarDecl		   ::= Type ID SEMICOLON;
MethodDeclStar ::= MethodDeclStar MethodDecl
				 |	;
MethodDecl	   ::= PUBLIC Type ID LPAREN FormalList RPAREN LBRACE VarDeclStar StatementStar RETURN Exp SEMICOLON RBRACE;
FormalList	   ::= Type ID FormalRestStar
			     |;
FormalRestStar ::= FormalRestStar FormalRest
				 |;
FormalRest	   ::= COMMA Type ID;
Type	   	   ::= INT LBRACK RBRACK
			     | BOOLEAN
			     | INT
			     | ID;
StatementStar  ::= Statement StatementStar
				 | ;
Statement	   ::= LBRACE StatementStar RBRACE
			     | IF LPAREN Exp RPAREN Statement ELSE Statement
			     | WHILE LPAREN Exp RPAREN Statement
			     | PRINTLN LPAREN Exp RPAREN SEMICOLON
			     | ID ASSIGN Exp SEMICOLON
			     | ID LBRACK Exp RBRACK ASSIGN Exp SEMICOLON;
Exp			   ::= Exp PLUS Exp
			     | Exp MINUS Exp
			     | Exp TIMES Exp
			     | Exp AND Exp
			     | Exp LT Exp
			     | Exp LBRACK Exp RBRACK
			     | Exp DOT LENGTH
			     | Exp DOT ID LPAREN ExpList RPAREN
			     | INTEGER_LITERAL
			     | TRUE
			     | FALSE
			     | ID
			     | THIS
			     | NEW INT LBRACK Exp RBRACK
			     | NEW ID LPAREN RPAREN
			     | EXCLAMATION Exp
			     | LPAREN Exp RPAREN;
ExpList		   ::= Exp ExpRestStar
			     |;
ExpRestStar	   ::= ExpRestStar ExpRest
			     |;
ExpRest		   ::= COMMA Exp;
			


